# this acts more like an Excel spreadsheet function, was designed for my wife's side business.
# it is designed to figure sub cost across 4 rows, add the columns,add in shipping and then calculate tax for the final total


from tkinter import *
import sqlite3

root = Tk()
root.title("Custom Calculator")
root.geometry("400x300")

# entry boxes
total_1 = Entry(root, width=15)
total_1.insert(0,1)
total_1.grid(row=0, column=1)
total_2 = Entry(root, width=15)
total_2.insert(0,1)
total_2.grid(row=1, column=1)
total_3 = Entry(root, width=15)
total_3.insert(0,1)
total_3.grid(row=2, column=1)
total_4 = Entry(root, width=15)
total_4.insert(0,1)
total_4.grid(row=3, column=1)


# #labels
total_1_l = Label(root, text="   One")
total_1_l.grid(row=0, column=0)
total_2_l = Label(root, text="   Two")
total_2_l.grid(row=1, column=0)
total_3_l = Label(root, text="   Three")
total_3_l.grid(row=2, column=0)
total_4_l = Label(root, text="   Four")
total_4_l.grid(row=3, column=0)


quantity_1 = Entry(root, width=15)
quantity_1.insert(0,0)
quantity_1.grid(row=0, column=3)
quantity_2 = Entry(root, width=15)
quantity_2.insert(0,0)
quantity_2.grid(row=1, column=3)
quantity_3 = Entry(root, width=15)
quantity_3.insert(0,0)
quantity_3.grid(row=2, column=3)
quantity_4 = Entry(root, width=15)
quantity_4.insert(0,0)
quantity_4.grid(row=3, column=3)

# basically for aesthetics
query_label = Label(root, text="   X   ")
query_label.grid(row=0, column=2,)
query_label = Label(root, text="   X   ")
query_label.grid(row=1, column=2)
query_label = Label(root, text="   X   ")
query_label.grid(row=2, column=2,)
query_label = Label(root, text="   X   ")
query_label.grid(row=3, column=2)


# Defining the math for iem 1 X quantity - defining the function in sub_btn
def sub():
    num_1 = int(total_1.get())
    qt_1 = float(quantity_1.get())
    sum_1 = num_1 * qt_1 # label 1
    #output label 1
    quantity_1_l = Label(root, text=round(sum_1,2))
    quantity_1_l.grid(row=0, column=5)

    # Defining the math for iem 2 X quantity
    num_2 = int(total_2.get())
    qt_2 = float(quantity_2.get())
    sum_2 = num_2 * qt_2 # label 2
    # Output label 2
    quantity_2_l = Label(root, text=round(sum_2,2))
    quantity_2_l.grid(row=1, column=5)
    
    # Defining the math for iem 3 X quantity
    num_3 = int(total_3.get())
    qt_3 = float(quantity_3.get())
    sum_3 = num_3 * qt_3 # label 3
    # Output label 3
    quantity_3_l = Label(root, text=round(sum_3,2))
    quantity_3_l.grid(row=2, column=5)
    
    # Defining the math for iem 4 X quantity
    num_4 = int(total_4.get())
    qt_4 = float(quantity_4.get())
    sum_4 = num_4 * qt_4 # label 4
    # Output label 4
    quantity_4_l = Label(root, text=round(sum_4,2))
    quantity_4_l.grid(row=3, column=5)
    
    show = sum_1 + sum_2 + sum_3 + sum_4 # label is for total before shipping is added
    
    
    # Output label that shows row totals plus shipping
    ship =int(7)
    sub_label = Label(root, text=round(show + ship,2))
    sub_label.grid(row=6, column=5)

    

# adding the sum of the rows together  - defining the function in tot_btn
def total():
    num_1 = int(total_1.get())
    qt_1 = float(quantity_1.get())   # defining the variables for the row
    
    num_2 = int(total_2.get())
    qt_2 = float(quantity_2.get())  # defining the variables for the row
    
    num_3 = int(total_3.get())
    qt_3 = float(quantity_3.get())    # defining the variables for the row
    
    num_4 = int(total_4.get())
    qt_4 = float(quantity_4.get())  # defining the variables for the row
    
    sum_1 = num_1 * qt_1
    sum_2 = num_2 * qt_2
    sum_3 = num_3 * qt_3
    sum_4 = num_4 * qt_4  # defining the variables for the rows
    
    show = sum_1 + sum_2 + sum_3 + sum_4    # defining the variables for the sums of the rows
    ship =int(7)                            # stored shipping cost
    tax = .07                               # stored tax
    tax2 = show + ship
    pretax = ((sum_1 + sum_2 + sum_3 + sum_4 + ship) * tax) + tax2 # Grand Total
    
    # Output Grand Total
    total_l = Label(root, text=round(pretax,2))   # using round function to make total (pretax) to 2 decimals
    total_l.grid(row=7, column=5)

#clear text boxes
    total_1.delete(0, END)
    total_2.delete(0, END)
    total_3.delete(0, END)
    total_4.delete(0, END)
    quantity_1.delete(0, END)
    quantity_2.delete(0, END)
    quantity_3.delete(0, END)
    quantity_4.delete(0, END)

shipping_label = Label(root, text="Shipping")
shipping_label.grid(row=4, column=3,)
seven_label = Label(root, text="   7.00   ")
seven_label.grid(row=4, column=5)


# Buttons
sub_btn = Button(root, text="Show Sub Total", command=sub)
sub_btn.grid(row=6, column=2, columnspan=2, padx=10, pady=10, ipadx=25)
tot_btn = Button(root, text="Show Total", command=total)
tot_btn.grid(row=7, column=2, columnspan=2, padx=10, pady=10, ipadx=25)




root.mainloop()
